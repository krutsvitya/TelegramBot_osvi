from datetime import datetime
import asyncio

from aiogram import F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from zoneinfo import ZoneInfo

from config import TOKEN, TEACHER_ID, ReplyState, bot, dp
from db import log_curator_action, log_message, init_db

if not TOKEN or not TEACHER_ID:
    raise ValueError("BOT_TOKEN –∞–±–æ TEACHER_ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Ç–∏ (–¥–ª—è —Ç–µ—Å—Ç—É)
requests = {}

@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –∑–∞–ø–∏—Ç, —ñ –≤—á–∏—Ç–µ–ª—å –æ—Ç—Ä–∏–º–∞—î –π–æ–≥–æ.")


@dp.message(ReplyState.waiting_for_reply)
async def process_reply(message: Message, state: FSMContext):
    """–ö—É—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î, –±–æ—Ç –ø–µ—Ä–µ—Å–∏–ª–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å—Ç—É–¥–µ–Ω—Ç—É."""

    print(f"‚úÖ –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–ø—Ä–∞—Ü—é–≤–∞–≤! –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∫—É—Ä–∞—Ç–æ—Ä–∞: '{message.text}'")

    if message.from_user.id != TEACHER_ID:
        print("‚ùå –ù–µ –∫—É—Ä–∞—Ç–æ—Ä –ø–∏—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ä–µ–∂–∏–º—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ! –Ü–≥–Ω–æ—Ä—É—î–º–æ.")
        return

    data = await state.get_data()
    print(f"üìù –î–∞–Ω—ñ —Å—Ç–∞–Ω—É: {data}")

    request_id = data.get("request_id")
    if not request_id or request_id not in requests:
        await message.answer("‚ö† –ü–æ–º–∏–ª–∫–∞: –ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return

    curator_id = message.from_user.id
    await log_message(request_id, curator_id, "curator", message.text)

    student_id = requests[request_id]["student_id"]
    print(f"üìä –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å—Ç—É–¥–µ–Ω—Ç—É –∑ ID: {student_id}")

    try:
        await bot.send_message(
            chat_id=student_id,
            text=f"üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∫—É—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}"
        )
        print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É {student_id}")

        if requests[request_id]["status"] != "–£ —Ä–æ–±–æ—Ç—ñ":
            requests[request_id]["status"] = "–£ —Ä–æ–±–æ—Ç—ñ"
            requests[request_id]["curator_id"] = message.from_user.id

        if "messages" not in requests[request_id]:
            requests[request_id]["messages"] = []

        requests[request_id]["messages"].append({
            "from": "curator",
            "text": message.text,
            "time": message.date.isoformat()
        })

        await message.answer("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É.")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å—Ç—É–¥–µ–Ω—Ç—É: {e}")
        await message.answer(f"‚ö† –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {e}")

    await state.clear()


@dp.message()
async def handle_student_request(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –π–æ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä—É."""
    print(f"‚ö†Ô∏è –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. ID: {message.from_user.id}, –¢–µ–∫—Å—Ç: '{message.text}'")

    current_state = await state.get_state()
    print(f"‚ö†Ô∏è –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω: {current_state}")

    if current_state is not None:
        print("‚ö†Ô∏è –Ñ –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫")
        return

    student_id = message.from_user.id

    if message.from_user.id == TEACHER_ID:
        return

    student_name = message.from_user.full_name

    active_request_id = None
    for req_id, req_data in requests.items():
        if req_data["student_id"] == student_id and req_data["status"] != "–ó–∞–≤–µ—Ä—à–µ–Ω–æ":
            active_request_id = req_id
            break

    if active_request_id:
        curator_id = requests[active_request_id].get("curator_id")

        recipient_id = curator_id if curator_id else TEACHER_ID
        request_id = str(message.message_id)
        curator_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_{active_request_id}")],
                [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥", callback_data=f"finish_{active_request_id}")],
                [InlineKeyboardButton(text="–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞ —É—Ç—Ä–∏–º–∞–Ω–Ω—è", callback_data=f"hold_{active_request_id}")]
            ]
        )

        await bot.send_message(
            recipient_id,
            f"üì© **–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {student_name}**\n\n"
            f"üìù *{message.text}*\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {requests[active_request_id]['status']}",
            reply_markup=curator_keyboard,
            parse_mode="Markdown"
        )

        await message.answer("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É.")
        return

    request_id = str(message.message_id)

    await log_message(request_id, student_id, "student", message.text)

    requests[request_id] = {
        "student_id": student_id,
        "student_name": student_name,
        "text": message.text,
        "status": "–û—á—ñ–∫—É—î –æ–±—Ä–æ–±–∫–∏",
        "curator_id": None,
        "messages": [{"from": "student", "text": message.text, "time": message.date.isoformat()}]
    }

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í–∑—è—Ç–∏ –≤ —Ä–æ–±–æ—Ç—É", callback_data=f"take_{request_id}")],
            [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥", callback_data=f"finish_{request_id}")],
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞", callback_data=f"reassign_{request_id}")],
            [InlineKeyboardButton(text="–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞ —É—Ç—Ä–∏–º–∞–Ω–Ω—è", callback_data=f"hold_{request_id}")]
        ]
    )

    await bot.send_message(
        TEACHER_ID,
        f"üì© **–ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥ {student_name}**\n\n"
        f"üìù *{message.text}*\n"
        f"‚è≥ –°—Ç–∞—Ç—É—Å: –û—á—ñ–∫—É—î –æ–±—Ä–æ–±–∫–∏",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

    await message.answer("‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫—É—Ä–∞—Ç–æ—Ä—É. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")


@dp.callback_query(F.data.startswith("reply_"))
async def ask_for_reply(callback_query: CallbackQuery, state: FSMContext):
    """–ö—É—Ä–∞—Ç–æ—Ä –Ω–∞—Ç–∏—Å–∫–∞—î '–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏'."""
    curator_id = callback_query.from_user.id
    request_id = callback_query.data.split("_")[1]

    print(f"üîç –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É '–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏'. request_id={request_id}, curator_id={curator_id}")

    if request_id not in requests:
        await callback_query.answer("–ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    await state.update_data(request_id=request_id)
    print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Å—Ç–∞–Ω—ñ: request_id={request_id}")

    await callback_query.answer()

    await state.set_state(ReplyState.waiting_for_reply)
    print("üîÑ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞–Ω: waiting_for_reply")

    await bot.send_message(
        curator_id,
        "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:"
    )


@dp.callback_query(F.data.startswith("take_"))
async def take_request(callback_query: CallbackQuery, state: FSMContext):
    """–ö—É—Ä–∞—Ç–æ—Ä –±–µ—Ä–µ –∑–∞–ø–∏—Ç —É —Ä–æ–±–æ—Ç—É"""
    curator_id = callback_query.from_user.id
    request_id = callback_query.data.split("_")[1]

    if request_id not in requests:
        await callback_query.answer("–ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    take_time = datetime.now(ZoneInfo("Europe/Kiev"))
    request_time = datetime.fromisoformat(requests[request_id]["messages"][0]["time"]).astimezone(
        ZoneInfo("Europe/Kiev"))
    reaction_time = take_time - request_time

    reaction_seconds = int(reaction_time.total_seconds())
    print(f"–°–µ–∫—É–Ω–¥–∏ —Ä–µ–∞–∫—Ü—ñ—ó: {reaction_seconds}")

    await log_curator_action(request_id, curator_id, "–≤–∑—è–≤ —É —Ä–æ–±–æ—Ç—É")

    if reaction_seconds < 60:
        reaction_str = "1 —Ö–≤–∏–ª–∏–Ω–∞"
    elif reaction_seconds < 3600:
        reaction_minutes = reaction_seconds // 60
        reaction_str = f"{reaction_minutes} —Ö–≤–∏–ª–∏–Ω"
    else:
        reaction_hours = reaction_seconds // 3600
        remaining_seconds = reaction_seconds % 3600
        reaction_minutes = remaining_seconds // 60
        reaction_str = f"{reaction_hours} –≥–æ–¥–∏–Ω–∞ {reaction_minutes} —Ö–≤–∏–ª–∏–Ω"

    requests[request_id]["reaction_time"] = reaction_str

    requests[request_id]["status"] = "–£ —Ä–æ–±–æ—Ç—ñ"
    requests[request_id]["curator_id"] = curator_id

    await callback_query.answer("–í–∏ –≤–∑—è–ª–∏ –∑–∞–ø–∏—Ç —É —Ä–æ–±–æ—Ç—É")
    await log_message(request_id, callback_query.from_user.id, "curator", callback_query.message.text)

    curator_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_{request_id}")],
            [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥", callback_data=f"finish_{request_id}")],
            [InlineKeyboardButton(text="–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞ —É—Ç—Ä–∏–º–∞–Ω–Ω—è", callback_data=f"hold_{request_id}")]
        ]
    )

    curator_name = callback_query.from_user.full_name

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"üì© **–ó–∞–ø–∏—Ç –≤—ñ–¥ {requests[request_id].get('student_name', '—Å—Ç—É–¥–µ–Ω—Ç–∞')}**\n\n"
             f"üìù *{requests[request_id]['text']}*\n"
             f"üîÑ –°—Ç–∞—Ç—É—Å: –£ —Ä–æ–±–æ—Ç—ñ\n"
             f"üë®‚Äçüíº –ö—É—Ä–∞—Ç–æ—Ä: {curator_name}\n"
             f"‚è± –ß–∞—Å –≤–∑—è—Ç—Ç—è –≤ —Ä–æ–±–æ—Ç—É: {take_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
             f"‚ö° –®–≤–∏–¥–∫—ñ—Å—Ç—å —Ä–µ–∞–∫—Ü—ñ—ó: {reaction_str}",
        reply_markup=curator_keyboard,
        parse_mode="Markdown"
    )

    await bot.send_message(
        requests[request_id]["student_id"],
        f"‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –≤–∑—è—Ç–æ —É —Ä–æ–±–æ—Ç—É. –ö—É—Ä–∞—Ç–æ—Ä: {curator_name}"
    )


@dp.callback_query(F.data.startswith("finish_"))
async def finish_request(callback_query: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥"""
    curator_id = callback_query.from_user.id
    request_id = callback_query.data.split("_")[1]

    if request_id not in requests:
        await callback_query.answer("–ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    if requests[request_id].get("curator_id") != curator_id:
        await callback_query.answer("–¢—ñ–ª—å–∫–∏ –∫—É—Ä–∞—Ç–æ—Ä, —è–∫–∏–π –≤–∑—è–≤ –∑–∞–ø–∏—Ç, –º–æ–∂–µ –π–æ–≥–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏")
        return

    requests[request_id]["status"] = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"

    await callback_query.answer("–î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    await log_curator_action(request_id, curator_id, "–ó–∞–≤–µ—Ä—à–∏–≤ –¥—ñ–∞–ª–æ–≥")

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"üì© **–ó–∞–ø–∏—Ç –≤—ñ–¥ {requests[request_id].get('student_name', '—Å—Ç—É–¥–µ–Ω—Ç–∞')}**\n\n"
             f"üìù *{requests[request_id]['text']}*\n"
             f"‚úÖ –°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω–æ\n"
             f"üë®‚Äçüíº –ö—É—Ä–∞—Ç–æ—Ä: {callback_query.from_user.full_name}",
        parse_mode="Markdown"
    )

    await bot.send_message(
        requests[request_id]["student_id"],
        "‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –±—É–ª–æ –∑–∞–∫—Ä–∏—Ç–æ. –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!"
    )


@dp.callback_query(F.data.startswith("reassign_"))
async def reassign_request(callback_query: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞"""
    request_id = callback_query.data.split("_")[1]

    if request_id not in requests:
        await callback_query.answer("–ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    curator_id = callback_query.from_user.id
    # –¢—É—Ç —Ç—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –≤–∏–±–æ—Ä—É –Ω–æ–≤–æ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞
    await log_curator_action(request_id, curator_id, "–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –∫—É—Ä–∞—Ç–æ—Ä–∞")
    await callback_query.answer("–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—è –∫—É—Ä–∞—Ç–æ—Ä–∞ —É —Ä–æ–∑—Ä–æ–±—Ü—ñ")


@dp.callback_query(F.data.startswith("hold_"))
async def hold_request(callback_query: CallbackQuery):
    """–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ —É—Ç—Ä–∏–º–∞–Ω–Ω—è"""
    curator_id = callback_query.from_user.id
    request_id = callback_query.data.split("_")[1]

    if request_id not in requests:
        await callback_query.answer("–ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    requests[request_id]["status"] = "–û—á—ñ–∫—É—î"

    await callback_query.answer("–ó–∞–ø–∏—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ —É—Ç—Ä–∏–º–∞–Ω–Ω—è")
    await log_curator_action(request_id, curator_id, "–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ —É—Ç—Ä–∏–º–∞–Ω–Ω—è")

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"üì© **–ó–∞–ø–∏—Ç –≤—ñ–¥ {requests[request_id].get('student_name', '—Å—Ç—É–¥–µ–Ω—Ç–∞')}**\n\n"
             f"üìù *{requests[request_id]['text']}*\n"
             f"‚è≥ –°—Ç–∞—Ç—É—Å: –û—á—ñ–∫—É—î\n"
             f"üë®‚Äçüíº –ö—É—Ä–∞—Ç–æ—Ä: {callback_query.from_user.full_name}",
        reply_markup=callback_query.message.reply_markup,
        parse_mode="Markdown"
    )

    await bot.send_message(
        requests[request_id]["student_id"],
        "‚è≥ –ö—É—Ä–∞—Ç–æ—Ä–∏ –∑–∞—Ä–∞–∑ –Ω–µ –ø–æ—Ä—É—á. –í–∞—à –∑–∞–ø–∏—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ —É—Ç—Ä–∏–º–∞–Ω–Ω—è."
    )


async def main():
    await init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())