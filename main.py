from datetime import datetime
import asyncio

from aiogram import F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from zoneinfo import ZoneInfo

from config import TOKEN, TEACHERS_IDS, ADMIN_ID, CURATOR_CHAT_ID, ReplyState, TeacherState, bot, dp
from db import (
    log_curator_action, log_message, init_db,
    get_all_teachers, add_teacher, deactivate_teacher,
    is_teacher, get_teacher_by_id
)

if not TOKEN or not TEACHERS_IDS or not CURATOR_CHAT_ID:
    raise ValueError("BOT_TOKEN, TEACHERS_IDS –∞–±–æ CURATOR_CHAT_ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Ç–∏
requests = {}
# Track thread IDs for each request
request_threads = {}


@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –∑–∞–ø–∏—Ç, —ñ –≤—á–∏—Ç–µ–ª—å –æ—Ç—Ä–∏–º–∞—î –π–æ–≥–æ.")


@dp.message(Command("teachers"))
async def list_teachers(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    teachers = await get_all_teachers()

    if not teachers:
        await message.answer("–°–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    text = "üìã –°–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª—ñ–≤:\n\n"
    for i, teacher in enumerate(teachers, 1):
        text += f"{i}. {teacher.full_name}"
        if teacher.username:
            text += f" (@{teacher.username})"
        text += f" - ID: {teacher.telegram_id}\n"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –≤—á–∏—Ç–µ–ª—è", callback_data="add_teacher")],
            [InlineKeyboardButton(text="‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –≤—á–∏—Ç–µ–ª—è", callback_data="remove_teacher")]
        ]
    )

    await message.answer(text, reply_markup=keyboard)


@dp.callback_query(F.data == "add_teacher")
async def add_teacher_request(callback_query: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∏—Ç–µ–ª—è"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return

    await callback_query.answer()
    await state.set_state(TeacherState.waiting_for_new_teacher)
    await bot.send_message(
        callback_query.from_user.id,
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å ID –Ω–æ–≤–æ–≥–æ –≤—á–∏—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç—ñ:\n1234567890, –Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ"
    )


@dp.callback_query(F.data == "remove_teacher")
async def remove_teacher_request(callback_query: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∏—Ç–µ–ª—è"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return

    await callback_query.answer()
    await state.set_state(TeacherState.waiting_for_teacher_removal)
    await bot.send_message(
        callback_query.from_user.id,
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å ID –≤—á–∏—Ç–µ–ª—è, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏:"
    )


@dp.message(TeacherState.waiting_for_new_teacher)
async def process_add_teacher(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–∏—Ç–µ–ª—è"""
    if message.from_user.id != ADMIN_ID:
        return

    try:
        parts = message.text.split(',', 1)
        if len(parts) != 2:
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: ID, –Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ")
            return

        telegram_id = int(parts[0].strip())
        full_name = parts[1].strip()

        existing_teacher = await get_teacher_by_id(telegram_id)
        if existing_teacher:
            await message.answer(f"–£—á–∏—Ç–µ–ª—å –∑ ID {telegram_id} –≤–∂–µ —ñ—Å–Ω—É—î.")
            await state.clear()
            return

        success = await add_teacher(
            telegram_id=telegram_id,
            username=None,
            full_name=full_name
        )

        if success:
            if telegram_id not in TEACHERS_IDS:
                TEACHERS_IDS.append(telegram_id)

            await message.answer(f"‚úÖ –£—á–∏—Ç–µ–ª—å {full_name} (ID: {telegram_id}) —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π.")
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤—á–∏—Ç–µ–ª—è.")

    except ValueError:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID. ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
    finally:
        await state.clear()


@dp.message(TeacherState.waiting_for_teacher_removal)
async def process_remove_teacher(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è"""
    if message.from_user.id != ADMIN_ID:
        return

    try:
        telegram_id = int(message.text.strip())

        existing_teacher = await get_teacher_by_id(telegram_id)
        if not existing_teacher:
            await message.answer(f"–£—á–∏—Ç–µ–ª—å –∑ ID {telegram_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
            await state.clear()
            return

        success = await deactivate_teacher(telegram_id)

        if success:
            if telegram_id in TEACHERS_IDS:
                TEACHERS_IDS.remove(telegram_id)

            await message.answer(f"‚úÖ –£—á–∏—Ç–µ–ª—å {existing_teacher.full_name} (ID: {telegram_id}) —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π.")
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –≤—á–∏—Ç–µ–ª—è.")

    except ValueError:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID. ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
    finally:
        await state.clear()


@dp.message(ReplyState.waiting_for_reply)
async def process_reply(message: Message, state: FSMContext):
    """–ö—É—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î, –±–æ—Ç –ø–µ—Ä–µ—Å–∏–ª–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å—Ç—É–¥–µ–Ω—Ç—É."""

    print(f"‚úÖ –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–ø—Ä–∞—Ü—é–≤–∞–≤! –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∫—É—Ä–∞—Ç–æ—Ä–∞: '{message.text}'")

    if message.from_user.id not in TEACHERS_IDS:
        print("‚ùå –ù–µ –∫—É—Ä–∞—Ç–æ—Ä –ø–∏—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ä–µ–∂–∏–º—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ! –Ü–≥–Ω–æ—Ä—É—î–º–æ.")
        return

    data = await state.get_data()
    print(f"üìù –î–∞–Ω—ñ —Å—Ç–∞–Ω—É: {data}")

    request_id = data.get("request_id")
    if not request_id or request_id not in requests:
        await message.answer("‚ö† –ü–æ–º–∏–ª–∫–∞: –ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return

    curator_id = message.from_user.id
    await log_message(request_id, curator_id, "curator", message.text)

    student_id = requests[request_id]["student_id"]
    print(f"üìä –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å—Ç—É–¥–µ–Ω—Ç—É –∑ ID: {student_id}")

    try:
        await bot.send_message(
            chat_id=student_id,
            text=f"üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∫—É—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}"
        )
        print(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É {student_id}")

        if requests[request_id]["status"] != "–£ —Ä–æ–±–æ—Ç—ñ":
            requests[request_id]["status"] = "–£ —Ä–æ–±–æ—Ç—ñ"
            requests[request_id]["curator_id"] = message.from_user.id

        if "messages" not in requests[request_id]:
            requests[request_id]["messages"] = []

        requests[request_id]["messages"].append({
            "from": "curator",
            "text": message.text,
            "time": message.date.isoformat()
        })

        # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ç—Ä–µ–¥
        thread_id = request_threads.get(request_id)
        if thread_id:
            await bot.send_message(
                chat_id=CURATOR_CHAT_ID,
                message_thread_id=thread_id,
                text=f"üí¨ –ö—É—Ä–∞—Ç–æ—Ä @{message.from_user.username or message.from_user.full_name} –≤—ñ–¥–ø–æ–≤—ñ–≤:\n\n{message.text}"
            )

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å—Ç—É–¥–µ–Ω—Ç—É: {e}")
        await message.answer(f"‚ö† –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {e}")

    await state.clear()


@dp.message()
async def handle_student_request(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–µ–¥ —É —á–∞—Ç—ñ –∫—É—Ä–∞—Ç–æ—Ä—ñ–≤."""
    print(f"‚ö†Ô∏è –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. ID: {message.from_user.id}, –¢–µ–∫—Å—Ç: '{message.text}'")

    current_state = await state.get_state()
    print(f"‚ö†Ô∏è –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω: {current_state}")

    if current_state is not None:
        print("‚ö†Ô∏è –Ñ –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫")
        return

    student_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞ –∏ –Ω–µ –ø—É—Å—Ç–æ–µ
    if message.from_user.id in TEACHERS_IDS or not message.text:
        return

    student_name = message.from_user.full_name
    student_username = message.from_user.username

    active_request_id = None
    for req_id, req_data in requests.items():
        if req_data["student_id"] == student_id and req_data["status"] != "–ó–∞–≤–µ—Ä—à–µ–Ω–æ":
            active_request_id = req_id
            break

    if active_request_id:
        # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
        if "messages" not in requests[active_request_id]:
            requests[active_request_id]["messages"] = []

        requests[active_request_id]["messages"].append({
            "from": "student",
            "text": message.text,
            "time": message.date.isoformat()
        })

        await log_message(active_request_id, student_id, "student", message.text)

        # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ç—Ä–µ–¥
        thread_id = request_threads.get(active_request_id)
        if thread_id:
            # –ü–æ—à—É–∫ —ñ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫—É—Ä–∞—Ç–æ—Ä–∞ —É —Ç—Ä–µ–¥—ñ
            try:
                # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç—Ä–µ–¥—ñ
                messages = await bot.get_chat_history(
                    chat_id=CURATOR_CHAT_ID,
                    message_thread_id=thread_id,
                    limit=20  # –û–±–º–µ–∂—É—î–º–æ –ø–æ—à—É–∫ –æ—Å—Ç–∞–Ω–Ω—ñ–º–∏ 20 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                )

                # –®—É–∫–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
                for msg in messages:
                    if msg.reply_markup is not None:
                        # –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏, –≤–∏–¥–∞–ª—è—î–º–æ —ó—Ö
                        await bot.edit_message_reply_markup(
                            chat_id=CURATOR_CHAT_ID,
                            message_id=msg.message_id,
                            reply_markup=None
                        )
                        break
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Å—Ç–∞—Ç—É—Å—É –∑–∞–ø–∏—Ç—É
            keyboard = None
            if requests[active_request_id]["status"] == "–û—á—ñ–∫—É—î –æ–±—Ä–æ–±–∫–∏":
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="–í–∑—è—Ç–∏ –≤ —Ä–æ–±–æ—Ç—É", callback_data=f"take_{active_request_id}")
                        ]
                    ]
                )
            elif requests[active_request_id]["status"] == "–£ —Ä–æ–±–æ—Ç—ñ":
                curator_id = requests[active_request_id].get("curator_id")
                if curator_id:
                    keyboard = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(text="–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_{active_request_id}"),
                                InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥",
                                                     callback_data=f"finish_{active_request_id}")
                            ],
                            [
                                InlineKeyboardButton(text="–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞ —É—Ç—Ä–∏–º–∞–Ω–Ω—è",
                                                     callback_data=f"hold_{active_request_id}"),
                                InlineKeyboardButton(text="–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç–∏",
                                                     callback_data=f"reassign_{active_request_id}")
                            ]
                        ]
                    )

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            await bot.send_message(
                chat_id=CURATOR_CHAT_ID,
                message_thread_id=thread_id,
                text=f"üì® –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞:\n\n{message.text}",
                reply_markup=keyboard
            )

        await message.answer("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É.")
        return

    # –ö–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω...
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø–∏—Ç
    request_id = str(message.message_id)

    await log_message(request_id, student_id, "student", message.text)

    requests[request_id] = {
        "student_id": student_id,
        "student_name": student_name,
        "student_username": student_username,
        "text": message.text,
        "status": "–û—á—ñ–∫—É—î –æ–±—Ä–æ–±–∫–∏",
        "messages": [{"from": "student", "text": message.text, "time": message.date.isoformat()}]
    }

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–µ–¥ —É —á–∞—Ç—ñ –∫—É—Ä–∞—Ç–æ—Ä—ñ–≤
    student_info = f"@{student_username}" if student_username else student_name

    # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º–∏–π —Ç—Ä–µ–¥ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—â–∏–π —á–∞—Ç
    thread_message = await bot.create_forum_topic(
        chat_id=CURATOR_CHAT_ID,
        name=f"–ó–∞–ø–∏—Ç: {student_info} - {datetime.now(ZoneInfo('Europe/Kiev')).strftime('%d.%m %H:%M')}",
        icon_color=0x6FB9F0
    )

    thread_id = thread_message.message_thread_id
    request_threads[request_id] = thread_id

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í–∑—è—Ç–∏ –≤ —Ä–æ–±–æ—Ç—É", callback_data=f"take_{request_id}")]
        ]
    )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —Ç—Ä–µ–¥
    await bot.send_message(
        chat_id=CURATOR_CHAT_ID,
        message_thread_id=thread_id,
        text=f"üì© **–ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥ {student_name}**\n\n"
             f"üìù *{message.text}*\n"
             f"‚è≥ –°—Ç–∞—Ç—É—Å: –û—á—ñ–∫—É—î –æ–±—Ä–æ–±–∫–∏\n\n"
             f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –∑–∞–ø–∏—Ç–æ–º:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

    await message.answer("‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫—É—Ä–∞—Ç–æ—Ä–∞–º. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")


@dp.callback_query(F.data.startswith("reply_"))
async def ask_for_reply(callback_query: CallbackQuery, state: FSMContext):
    """–ö—É—Ä–∞—Ç–æ—Ä –Ω–∞—Ç–∏—Å–∫–∞—î '–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏'."""
    curator_id = callback_query.from_user.id

    if curator_id not in TEACHERS_IDS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return

    request_id = callback_query.data.split("_")[1]

    print(f"üîç –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É '–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏'. request_id={request_id}, curator_id={curator_id}")

    if request_id not in requests:
        await callback_query.answer("–ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä
    assigned_curator = requests[request_id].get("curator_id")
    if assigned_curator is not None and assigned_curator != curator_id:
        await callback_query.answer("–¢—ñ–ª—å–∫–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –∫—É—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç")
        return

    await state.update_data(request_id=request_id)
    print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Å—Ç–∞–Ω—ñ: request_id={request_id}")

    await callback_query.answer()

    await state.set_state(ReplyState.waiting_for_reply)
    print("üîÑ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞–Ω: waiting_for_reply")

    # –¢–∞–∫–æ–∂ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç—Ä–µ–¥
    thread_id = request_threads.get(request_id)
    if thread_id:
        await bot.send_message(
            chat_id=CURATOR_CHAT_ID,
            message_thread_id=thread_id,
            text=f"‚å®Ô∏è –ö—É—Ä–∞—Ç–æ—Ä @{callback_query.from_user.username or callback_query.from_user.full_name} –≥–æ—Ç—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å..."
        )


@dp.callback_query(F.data.startswith("take_"))
async def take_request(callback_query: CallbackQuery, state: FSMContext):
    """–ö—É—Ä–∞—Ç–æ—Ä –±–µ—Ä–µ –∑–∞–ø–∏—Ç —É —Ä–æ–±–æ—Ç—É"""
    curator_id = callback_query.from_user.id

    if curator_id not in TEACHERS_IDS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return

    request_id = callback_query.data.split("_")[1]

    if request_id not in requests:
        await callback_query.answer("–ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ø–∏—Ç –≤–∂–µ –≤–∑—è—Ç–∏–π –≤ —Ä–æ–±–æ—Ç—É —ñ–Ω—à–∏–º –∫—É—Ä–∞—Ç–æ—Ä–æ–º
    if requests[request_id]["status"] == "–£ —Ä–æ–±–æ—Ç—ñ" and requests[request_id].get("curator_id") != curator_id:
        await callback_query.answer("–¶–µ–π –∑–∞–ø–∏—Ç –≤–∂–µ –≤–∑—è—Ç–∏–π –≤ —Ä–æ–±–æ—Ç—É —ñ–Ω—à–∏–º –∫—É—Ä–∞—Ç–æ—Ä–æ–º")
        return

    take_time = datetime.now(ZoneInfo("Europe/Kiev"))
    request_time = datetime.fromisoformat(requests[request_id]["messages"][0]["time"]).astimezone(
        ZoneInfo("Europe/Kiev"))
    reaction_time = take_time - request_time

    reaction_seconds = int(reaction_time.total_seconds())
    print(f"–°–µ–∫—É–Ω–¥–∏ —Ä–µ–∞–∫—Ü—ñ—ó: {reaction_seconds}")

    await log_curator_action(request_id, curator_id, "–≤–∑—è–≤ —É —Ä–æ–±–æ—Ç—É")

    if reaction_seconds < 60:
        reaction_str = "1 —Ö–≤–∏–ª–∏–Ω–∞"
    elif reaction_seconds < 3600:
        reaction_minutes = reaction_seconds // 60
        reaction_str = f"{reaction_minutes} —Ö–≤–∏–ª–∏–Ω"
    else:
        reaction_hours = reaction_seconds // 3600
        remaining_seconds = reaction_seconds % 3600
        reaction_minutes = remaining_seconds // 60
        reaction_str = f"{reaction_hours} –≥–æ–¥–∏–Ω–∞ {reaction_minutes} —Ö–≤–∏–ª–∏–Ω"

    requests[request_id]["reaction_time"] = reaction_str

    requests[request_id]["status"] = "–£ —Ä–æ–±–æ—Ç—ñ"
    requests[request_id]["curator_id"] = curator_id

    requests[request_id]["curator_username"] = callback_query.from_user.username
    requests[request_id]["curator_name"] = callback_query.from_user.full_name

    await callback_query.answer("–í–∏ –≤–∑—è–ª–∏ –∑–∞–ø–∏—Ç —É —Ä–æ–±–æ—Ç—É")

    curator_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_{request_id}"),
                InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥", callback_data=f"finish_{request_id}")
            ],
            [
                InlineKeyboardButton(text="–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞ —É—Ç—Ä–∏–º–∞–Ω–Ω—è", callback_data=f"hold_{request_id}"),
                InlineKeyboardButton(text="–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç–∏", callback_data=f"reassign_{request_id}")
            ]
        ]
    )

    curator_username = callback_query.from_user.username
    curator_name = callback_query.from_user.full_name

    curator_info = f"@{curator_username}" if curator_username else curator_name

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ callback_query.message –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=None
        )
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–Ω–æ–ø–æ–∫: {e}")

    thread_id = request_threads.get(request_id)
    if thread_id:
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç—Ä–µ–¥—ñ
        await bot.send_message(
            chat_id=CURATOR_CHAT_ID,
            message_thread_id=thread_id,
            text=f"üöÄ –ó–∞–ø–∏—Ç –≤–∑—è—Ç–æ –≤ —Ä–æ–±–æ—Ç—É –∫—É—Ä–∞—Ç–æ—Ä–æ–º {curator_info}.\n"
                 f"‚è± –ß–∞—Å –≤–∑—è—Ç—Ç—è –≤ —Ä–æ–±–æ—Ç—É: {take_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
                 f"‚ö° –®–≤–∏–¥–∫—ñ—Å—Ç—å —Ä–µ–∞–∫—Ü—ñ—ó: {reaction_str}",
            reply_markup=curator_keyboard
        )

        # –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–∑–≤—É —Ç–µ–º–∏ –∑ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º —ñ–º–µ–Ω—ñ –∫—É—Ä–∞—Ç–æ—Ä–∞
        student_info = requests[request_id].get("student_username", requests[request_id]["student_name"])
        student_info = f"@{student_info}" if "@" not in student_info else student_info

        await bot.edit_forum_topic(
            chat_id=CURATOR_CHAT_ID,
            message_thread_id=thread_id,
            name=f"–ó–∞–ø–∏—Ç: {student_info} ‚û§ {curator_info}"
        )

    await bot.send_message(
        requests[request_id]["student_id"],
        f"‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –≤–∑—è—Ç–æ –≤ —Ä–æ–±–æ—Ç—É –∫—É—Ä–∞—Ç–æ—Ä–æ–º. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
    )


@dp.callback_query(F.data.startswith("finish_"))
async def finish_request(callback_query: CallbackQuery):
    """–ö—É—Ä–∞—Ç–æ—Ä –∑–∞–∫—Ä–∏–≤–∞—î –∑–∞–ø–∏—Ç"""
    curator_id = callback_query.from_user.id
    request_id = callback_query.data.split("_")[1]

    if curator_id not in TEACHERS_IDS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return

    if request_id not in requests:
        await callback_query.answer("–ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    assigned_curator = requests[request_id].get("curator_id")
    if assigned_curator is not None and assigned_curator != curator_id:
        await callback_query.answer("–¢—ñ–ª—å–∫–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –∫—É—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥")
        return

    requests[request_id]["status"] = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
    await log_curator_action(request_id, curator_id, "–∑–∞–≤–µ—Ä—à–∏–≤ –¥—ñ–∞–ª–æ–≥")

    curator_username = callback_query.from_user.username
    curator_name = callback_query.from_user.full_name

    if not requests[request_id].get("curator_username"):
        requests[request_id]["curator_username"] = curator_username

    if not requests[request_id].get("curator_name"):
        requests[request_id]["curator_name"] = curator_name

    curator_info = f"@{requests[request_id]['curator_username']}" if requests[request_id].get("curator_username") else \
        requests[request_id].get("curator_name", "–ù–µ–≤—ñ–¥–æ–º–æ")

    await callback_query.answer("–ó–∞–ø–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    # –í–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=None
        )
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–Ω–æ–ø–æ–∫: {e}")

    thread_id = request_threads.get(request_id)
    if thread_id:
        # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ —Ç—Ä–µ–¥—ñ
        await bot.send_message(
            chat_id=CURATOR_CHAT_ID,
            message_thread_id=thread_id,
            text=f"‚úÖ –ó–∞–ø–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫—É—Ä–∞—Ç–æ—Ä–æ–º {curator_info}.\n"
                 f"‚è± –ß–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {datetime.now(ZoneInfo('Europe/Kiev')).strftime('%Y-%m-%d %H:%M:%S')}",
            reply_markup=None
        )

        # –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–∑–≤—É —Ç–µ–º–∏, –¥–æ–¥–∞—é—á–∏ [–ó–ê–í–ï–†–®–ï–ù–û]
        student_info = requests[request_id].get("student_username", requests[request_id]["student_name"])
        student_info = f"@{student_info}" if "@" not in student_info else student_info

        await bot.edit_forum_topic(
            chat_id=CURATOR_CHAT_ID,
            message_thread_id=thread_id,
            name=f"[–ó–ê–í–ï–†–®–ï–ù–û] {student_info} ‚û§ {curator_info}"
        )

        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Ç–µ–º—É —Ñ–æ—Ä—É–º—É, —è–∫—â–æ —Ç–∞–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è API
        try:
            await bot.close_forum_topic(
                chat_id=CURATOR_CHAT_ID,
                message_thread_id=thread_id
            )
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–∫—Ä–∏—Ç–∏ —Ç–µ–º—É —Ñ–æ—Ä—É–º—É: {e}")

    await bot.send_message(
        requests[request_id]["student_id"],
        f"‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫—É—Ä–∞—Ç–æ—Ä–æ–º {curator_info}. –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!"
    )


@dp.callback_query(F.data.startswith("hold_"))
async def hold_request(callback_query: CallbackQuery):
    """–ö—É—Ä–∞—Ç–æ—Ä —Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–∏—Ç –Ω–∞ —É—Ç—Ä–∏–º–∞–Ω–Ω—è"""
    curator_id = callback_query.from_user.id
    request_id = callback_query.data.split("_")[1]

    if curator_id not in TEACHERS_IDS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return

    if request_id not in requests:
        await callback_query.answer("–ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    if requests[request_id].get("curator_id") != curator_id and requests[request_id].get("curator_id") is not None:
        await callback_query.answer("–¢—ñ–ª—å–∫–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –∫—É—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ —É—Ç—Ä–∏–º–∞–Ω–Ω—è")
        return

    if requests[request_id].get("status") == "–£ —Ä–æ–±–æ—Ç—ñ":
        requests[request_id]["status"] = "–û—á—ñ–∫—É—î"
        assigned_curator = curator_id
    else:
        requests[request_id]["curator_id"] = curator_id
        requests[request_id]["curator_username"] = callback_query.from_user.username
        requests[request_id]["curator_name"] = callback_query.from_user.full_name
        requests[request_id]["status"] = "–û—á—ñ–∫—É—î"
        assigned_curator = curator_id

    await log_curator_action(request_id, curator_id, "–ø–æ—Å—Ç–∞–≤–∏–≤ –Ω–∞ —É—Ç—Ä–∏–º–∞–Ω–Ω—è")
    await callback_query.answer("–ó–∞–ø–∏—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ —É—Ç—Ä–∏–º–∞–Ω–Ω—è")

    curator_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"reply_{request_id}"),
                InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥", callback_data=f"finish_{request_id}")
            ],
            [
                InlineKeyboardButton(text="–í–∑—è—Ç–∏ –≤ —Ä–æ–±–æ—Ç—É", callback_data=f"take_{request_id}"),
                InlineKeyboardButton(text="–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç–∏", callback_data=f"reassign_{request_id}")
            ]
        ]
    )

    curator_info = f"@{callback_query.from_user.username}" if callback_query.from_user.username else callback_query.from_user.full_name

    # –í–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=None
        )
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–Ω–æ–ø–æ–∫: {e}")

    thread_id = request_threads.get(request_id)
    if thread_id:
        # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ —Ç—Ä–µ–¥—ñ
        await bot.send_message(
            chat_id=CURATOR_CHAT_ID,
            message_thread_id=thread_id,
            text=f"‚è∏ –ó–∞–ø–∏—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ —É—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä–∞—Ç–æ—Ä–æ–º {curator_info}.\n"
                 f"‚è± –ß–∞—Å: {datetime.now(ZoneInfo('Europe/Kiev')).strftime('%Y-%m-%d %H:%M:%S')}",
            reply_markup=curator_keyboard
        )

        # –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–∑–≤—É —Ç–µ–º–∏, –¥–æ–¥–∞—é—á–∏ [–ù–ê –£–¢–†–ò–ú–ê–ù–ù–Ü]
        student_info = requests[request_id].get("student_username", requests[request_id]["student_name"])
        student_info = f"@{student_info}" if "@" not in student_info else student_info

        await bot.edit_forum_topic(
            chat_id=CURATOR_CHAT_ID,
            message_thread_id=thread_id,
            name=f"[–ù–ê –£–¢–†–ò–ú–ê–ù–ù–Ü] {student_info} ‚û§ {curator_info}"
        )

    await bot.send_message(
        requests[request_id]["student_id"],
        "‚è≥ –í–∞—à –∑–∞–ø–∏—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ —É—Ç—Ä–∏–º–∞–Ω–Ω—è. –ö—É—Ä–∞—Ç–æ—Ä –ø–æ–≤–µ—Ä–Ω–µ—Ç—å—Å—è –¥–æ –≤–∞—Å –ø—ñ–∑–Ω—ñ—à–µ."
    )


@dp.callback_query(F.data.startswith("reassign_"))
async def reassign_request(callback_query: CallbackQuery):
    """–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Ç—É"""
    curator_id = callback_query.from_user.id
    request_id = callback_query.data.split("_")[1]

    if curator_id not in TEACHERS_IDS:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return

    if request_id not in requests:
        await callback_query.answer("–ó–∞–ø–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä
    assigned_curator = requests[request_id].get("curator_id")
    if assigned_curator != curator_id:
        await callback_query.answer("–¢—ñ–ª—å–∫–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –∫—É—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç–∏ –∑–∞–ø–∏—Ç")
        return

    prev_curator = requests[request_id].get("curator_id")
    prev_curator_info = None
    if prev_curator:
        prev_curator_info = f"@{requests[request_id].get('curator_username')}" if requests[request_id].get(
            "curator_username") else requests[request_id].get("curator_name", "–ù–µ–≤—ñ–¥–æ–º–æ")

    requests[request_id]["curator_id"] = None
    requests[request_id]["status"] = "–û—á—ñ–∫—É—î –æ–±—Ä–æ–±–∫–∏"

    await log_curator_action(request_id, curator_id, "–ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏–≤ –∑–∞–ø–∏—Ç")
    await callback_query.answer("–ó–∞–ø–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —ñ–Ω—à–∏—Ö –∫—É—Ä–∞—Ç–æ—Ä—ñ–≤")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í–∑—è—Ç–∏ –≤ —Ä–æ–±–æ—Ç—É", callback_data=f"take_{request_id}")],
        ]
    )

    # –í–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=None
        )
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–Ω–æ–ø–æ–∫: {e}")

    thread_id = request_threads.get(request_id)
    if thread_id:
        # –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ —Ç—Ä–µ–¥—ñ
        reassign_text = f"üîÑ –ó–∞–ø–∏—Ç –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –∫—É—Ä–∞—Ç–æ—Ä–æ–º @{callback_query.from_user.username or callback_query.from_user.full_name}."
        if prev_curator_info:
            reassign_text += f"\n–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫—É—Ä–∞—Ç–æ—Ä: {prev_curator_info}"

        await bot.send_message(
            chat_id=CURATOR_CHAT_ID,
            message_thread_id=thread_id,
            text=f"{reassign_text}\n‚è± –ß–∞—Å: {datetime.now(ZoneInfo('Europe/Kiev')).strftime('%Y-%m-%d %H:%M:%S')}\n\n–ó–∞–ø–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –≤–∑—è—Ç—Ç—è –≤ —Ä–æ–±–æ—Ç—É:",
            reply_markup=keyboard
        )

        # –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–∑–≤—É —Ç–µ–º–∏
        student_info = requests[request_id].get("student_username", requests[request_id]["student_name"])
        student_info = f"@{student_info}" if "@" not in student_info else student_info

        await bot.edit_forum_topic(
            chat_id=CURATOR_CHAT_ID,
            message_thread_id=thread_id,
            name=f"[–î–û–°–¢–£–ü–ù–ò–ô] –ó–∞–ø–∏—Ç: {student_info}"
        )

    await bot.send_message(
        requests[request_id]["student_id"],
        "üîÑ –í–∞—à –∑–∞–ø–∏—Ç –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ, —ñ–Ω—à–∏–π –∫—É—Ä–∞—Ç–æ—Ä –ø—Ä–∏–π–º–µ –π–æ–≥–æ –≤ —Ä–æ–±–æ—Ç—É."
    )


async def main():
    await init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
